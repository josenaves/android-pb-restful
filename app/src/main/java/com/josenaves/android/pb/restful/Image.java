// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: image.proto at 7:1
package com.josenaves.android.pb.restful;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Image extends Message<Image, Image.Builder> {
  public static final ProtoAdapter<Image> ADAPTER = new ProtoAdapter_Image();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_DATE = "";

  public static final ByteString DEFAULT_IMAGE_DATA = ByteString.EMPTY;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String name;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String date;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.REQUIRED
  )
  public final ByteString image_data;

  public Image(String id, String name, String date, ByteString image_data) {
    this(id, name, date, image_data, ByteString.EMPTY);
  }

  public Image(String id, String name, String date, ByteString image_data, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.name = name;
    this.date = date;
    this.image_data = image_data;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.name = name;
    builder.date = date;
    builder.image_data = image_data;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Image)) return false;
    Image o = (Image) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(name, o.name)
        && Internal.equals(date, o.date)
        && Internal.equals(image_data, o.image_data);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (date != null ? date.hashCode() : 0);
      result = result * 37 + (image_data != null ? image_data.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (name != null) builder.append(", name=").append(name);
    if (date != null) builder.append(", date=").append(date);
    if (image_data != null) builder.append(", image_data=").append(image_data);
    return builder.replace(0, 2, "Image{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Image, Builder> {
    public String id;

    public String name;

    public String date;

    public ByteString image_data;

    public Builder() {
    }

    public Builder id(String id) {
      this.id = id;
      return this;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder date(String date) {
      this.date = date;
      return this;
    }

    public Builder image_data(ByteString image_data) {
      this.image_data = image_data;
      return this;
    }

    @Override
    public Image build() {
      if (id == null
          || name == null
          || date == null
          || image_data == null) {
        throw Internal.missingRequiredFields(id, "id",
            name, "name",
            date, "date",
            image_data, "image_data");
      }
      return new Image(id, name, date, image_data, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Image extends ProtoAdapter<Image> {
    ProtoAdapter_Image() {
      super(FieldEncoding.LENGTH_DELIMITED, Image.class);
    }

    @Override
    public int encodedSize(Image value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.name)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.date)
          + ProtoAdapter.BYTES.encodedSizeWithTag(4, value.image_data)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Image value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.date);
      ProtoAdapter.BYTES.encodeWithTag(writer, 4, value.image_data);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Image decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.date(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.image_data(ProtoAdapter.BYTES.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Image redact(Image value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
